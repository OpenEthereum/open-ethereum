name: Test

on:
  pull_request:
  push:
    branches:
      - master
jobs:
  check:
    name: Check
    runs-on: ubuntu-16.04
    env:
      SCCACHE_CACHE_SIZE: "1G"
      SCCACHE_VERSION: "0.2.12"
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1.1.2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache
        continue-on-error: true
        run: |
          URL="https://github.com/mozilla/sccache/releases/download/"+
            "$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          curl -LO $URL
          tar -xzvf "sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          cp -v x86_64-unknown-linux-musl/sccache ~/.cargo/sccache
      - name: Cache sccache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-check-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo check 1/3
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --no-default-features --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Run cargo check 2/3
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --manifest-path util/io/Cargo.toml --no-default-features --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Run cargo check 3/3
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --manifest-path util/io/Cargo.toml --features "mio" --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Run cargo check evmbin
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked -p evmbin --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Run cargo check benches
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --all --benches --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Run validate chainspecs
        run: ./scripts/actions/validate-chainspecs.sh
        env:
          RUSTC_WRAPPER: sccache
      - name: Sccache statistics
        run: sccache --show-stats
      # From https://github.com/launchbadge/sqlx/blob/master/.github/workflows/rust.yml
      - name: Prepare build directory for cache
        run: |
          find ./target/debug -maxdepth 1 -type f -delete \
          && rm -fr ./target/debug/{deps,.fingerprint}/*{parity,ethcore,ethkey,ethstore,parity-evm}* \
          && rm -f  ./target/.rustc_info.json
  build-tests:
    name: Build Release Test Suite
    needs: check
    strategy:
      matrix:
        platform:
          - ubuntu-16.04
          - macos-latest
          - windows-latest
        toolchain:
          - stable
    runs-on: ${{ matrix.platform }}
    env:
      SCCACHE_CACHE_SIZE: "1G"
      SCCACHE_VERSION: "0.2.12"
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1.1.2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache for ${{ matrix.platform }}
        run: |
          case ${{ matrix.platform }} in
            ubuntu-16.04) export SCCACHE_PLATFORM = "x86_64-unknown-linux-musl";;
            windows-latest) export SCCACHE_PLATFORM = "x86_64-pc-windows-msvc";;
            macos-latest) export SCCACHE_PLATFORM = "x86_64-apple-darwin";;
            *) exit 0;;
          esac
          URL="https://github.com/mozilla/sccache/releases/download/"+
            "$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          curl -LO $URL
          tar -xzvf "sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          cp -v x86_64-unknown-linux-musl/sccache* ~/.cargo/sccache*
      - name: Cache sccache linux
        if:  matrix.platform == 'ubuntu-16.04'
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache MacOS
        if:  matrix.platform == 'macos-latest'
        uses: actions/cache@v1.1.2
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-sccache-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache Windows
        if:  matrix.platform == 'windows-latest'
        uses: actions/cache@v1.1.2
        with:
          path: '%LOCALAPPDATA%\Mozilla\sccache'
          key: ${{ runner.os }}-sccache-build-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Install LLVM for Windows
        if:  matrix.platform == 'windows-latest'
        run: choco install llvm
      - name: Build tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all --release --features "json-tests" --verbose --no-run
      - name: Sccache statistics
        run: sccache --show-stats
      - name: Prepare build directory for cache
        if:  matrix.platform != 'windows-latest'
        run: |
          find ./target/release -maxdepth 1 -type f -delete;
          rm -fr ./target/release/{deps,.fingerprint}/*{parity,ethcore,ethkey,ethstore,parity-evm}*;
          rm -f  ./target/.rustc_info.json;
  run-tests:
    name: Run Test Suite
    needs: build-tests
    strategy:
      matrix:
        platform:
          - ubuntu-16.04
          - macos-latest
          - windows-latest
        toolchain:
          - stable
    runs-on: ${{ matrix.platform }}
    env:
      SCCACHE_CACHE_SIZE: "1G"
      SCCACHE_VERSION: "0.2.12"
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1.1.2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache for ${{ matrix.platform }}
        run: |
          case ${{ matrix.platform }} in
            ubuntu-16.04) export SCCACHE_PLATFORM = "x86_64-unknown-linux-musl";;
            windows-latest) export SCCACHE_PLATFORM = "x86_64-pc-windows-msvc";;
            macos-latest) export SCCACHE_PLATFORM = "x86_64-apple-darwin";;
            *) exit 0;;
          esac
          URL="https://github.com/mozilla/sccache/releases/download/"+
            "$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          curl -LO $URL
          tar -xzvf "sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz"
          cp -v x86_64-unknown-linux-musl/sccache* ~/.cargo/sccache*
      - name: Cache sccache linux
        if:  matrix.platform == 'ubuntu-16.04'
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache MacOS
        if:  matrix.platform == 'macos-latest'
        uses: actions/cache@v1.1.2
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-sccache-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache Windows
        if:  matrix.platform == 'windows-latest'
        uses: actions/cache@v1.1.2
        with:
          path: '%LOCALAPPDATA%\Mozilla\sccache'
          key: ${{ runner.os }}-sccache-run-tests-${{ hashFiles('**/Cargo.lock') }}
      - name: Install LLVM for Windows
        if:  matrix.platform == 'windows-latest'
        run:  choco install llvm
      - name: Run tests
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all --release --features "json-tests" --verbose
        env:
          RUSTC_WRAPPER: sccache
      - name: Sccache statistics
        run: sccache --show-stats
      - name: Prepare build directory for cache
        if:  matrix.platform != 'windows-latest'
        run: |
          find ./target/release -maxdepth 1 -type f -delete;
          rm -fr ./target/release/{deps,.fingerprint}/*{parity,ethcore,ethkey,ethstore,parity-evm}*;
          rm -f  ./target/.rustc_info.json;
