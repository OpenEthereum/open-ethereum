name: Build

on:
  push:
    pull_request: #TODO remove before merge
    branches:
      - stable
      - actions
    tags:
      - v2*

jobs:
  build:
    name: Build Release Suite
    strategy:
      matrix:
        platform:
          - ubuntu-16.04
          - macos-latest
          - windows-latest
        toolchain:
          - stable
    runs-on: ${{ matrix.platform }}
    env:
      SCCACHE_CACHE_SIZE: "1G"
      SCCACHE_VERSION: "0.2.12"
      RUSTC_WRAPPER: sccache      
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1.1.2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Install sccache for ${{ matrix.platform }}
        run: |
          $SCCACHE_PLATFORM =
            @{ "macOS"   = "x86_64-apple-darwin"
               "Linux"   = "x86_64-unknown-linux-musl"
               "Windows" = "x86_64-pc-windows-msvc"
             }.${{ runner.os }}
          URL="https://github.com/mozilla/sccache/releases/download/"+"$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-$SCCACHE_PLATFORM.tar.gz"
          curl -LO $URL
          tar -xzvf "sccache-$SCCACHE_VERSION-x86_64-$SCCACHE_PLATFORM.tar.gz"
          cp -v $SCCACHE_PLATFORM/sccache* ~/.cargo/sccache*
      - name: Cache sccache linux
        if:  matrix.platform == 'ubuntu-16.04'
        uses: actions/cache@v1.1.2
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache MacOS
        if:  matrix.platform == 'macos-latest'
        uses: actions/cache@v1.1.2
        with:
          path: ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-sccache-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache sccache Windows
        if:  matrix.platform == 'windows-latest'
        uses: actions/cache@v1.1.2
        with:
          path: '%LOCALAPPDATA%/\Mozilla/\sccache'
          key: ${{ runner.os }}-sccache-build-${{ hashFiles('**/Cargo.lock') }}
      - name: Install LLVM for Windows
        if:  matrix.platform == 'windows-latest'
        run:  choco install llvm
      - name: Build OpenEthereum for windows
        continue-on-error: true
        if:  matrix.platform == 'windows-latest'
        run: sh scripts/actions/build-windows.sh ${{matrix.platform}}
        env:
          RUSTC_WRAPPER: sccache
      - name: Build OpenEthereum for ${{matrix.platform}}
        continue-on-error: true
        if:  matrix.platform != 'windows-latest'
        run: sh scripts/actions/build-linux.sh ${{matrix.platform}}
        env:
          RUSTC_WRAPPER: sccache
      - name: Sccache statistics
        run: sccache --show-stats
      - name: Download artifact
        uses: actions/upload-artifact@v1
        continue-on-error: true
        with:
          name: ${{matrix.platform}}.artifacts.zip
          path: artifacts/
      - name: Prepare build directory for cache
        if:  matrix.platform != 'windows-latest'
        run: |
          find ./target/release -maxdepth 1 -type f -delete;
          rm -fr ./target/release/{deps,.fingerprint}/*{parity,ethcore,ethkey,ethstore,parity-evm}*;
          rm -f  ./target/.rustc_info.json;
