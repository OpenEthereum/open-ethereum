// Copyright 2015, 2016 Ethcore (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

import React, { Component } from 'react';
import { observer } from 'mobx-react';

import Store from './store';
import styles from './application.css';

import { api } from './parity';

@observer
export default class Application extends Component {
  store = Store.instance();

  render () {
    return this.store.isLoading
      ? this.renderLoading()
      : this.renderApplication();
  }

  renderApplication () {
    return (
      <div className={ styles.body }>
        { this.renderWarning() }
        <div className={ styles.apps }>
          { this.renderAppsSelect() }
          { this.renderCurrentApp() }
          { this.renderButtons() }
        </div>
        { this.renderFooter() }
      </div>
    );
  }

  renderAppsSelect () {
    if (this.store.isNew) {
      return null;
    }

    return (
      <div>
        <label>Application, the actual application details to show below</label>
        <select
          value={ this.store.currentApp.id }
          readOnly={ this.store.isEditing }
          onChange={ this.onSelectApp }>
          { this.renderAppsSelectOptions() }
        </select>
      </div>
    );
  }

  renderAppsSelectOptions () {
    return this.store.apps.map((app) => {
      return (
        <option value={ app.id } key={ app.id }>
          { app.name } ({ app.id })
        </option>
      );
    });
  }

  renderAccountOptions () {
    return this.store.accounts.map((account) => {
      return (
        <option value={ account.address } key={ account.address }>
          { account.name }
        </option>
      );
    });
  }

  renderButtons () {
    let buttons = [];

    if (this.store.isEditing || this.store.isNew) {
      buttons = [
        <button onClick={ this.onCancelClick } key='edit'>Cancel</button>,
        <button onClick={ this.onSaveClick } key='edit'>Save</button>
      ];
    } else {
      buttons = [
        <button onClick={ this.onEditClick } key='edit' disabled={ !this.store.currentApp.isOwner }>Edit</button>,
        <button onClick={ this.onNewClick } key='new'>New</button>
      ];
    }

    return (
      <div className={ styles.buttonbar }>
        { buttons }
      </div>
    );
  }

  renderCurrentApp () {
    const app = this.store.currentApp;
    const label = <label>Owner, the application owner and editor</label>;

    let ownerInput;
    if (this.store.isNew) {
      ownerInput = (
        <div>
          { label }
          <select
            value={ this.store.currentAccount.address }
            onChange={ this.onSelectAccount }>
            { this.renderAccountOptions() }
          </select>
          <div className={ styles.hint }>{ app.owner }</div>
        </div>
      );
    } else {
      ownerInput = (
        <div>
          { label }
          <input value={ app.ownerName } readOnly />
          <div className={ styles.hint }>{ app.owner }</div>
        </div>
      );
    }

    return (
      <div className={ styles.app }>
        <div className={ styles.section }>
          <div>
            <label>Application Id, the unique assigned identifier</label>
            <input value={ app.id } readOnly />
            <div className={ styles.hint }>...</div>
          </div>
          { ownerInput }
        </div>
        <div className={ styles.section }>
          <div>
            <label>Image hash, as generated by Githubhint</label>
            <input value={ app.imageHash || '' } readOnly={ !this.store.isEditing && !this.store.isNew } />
            <div className={ styles.hint }>{ app.imageUrl || '...' }</div>
          </div>
          <div>
            <label>Manifest hash, as generated by Githubhint</label>
            <input value={ app.manifestHash || '' } readOnly={ !this.store.isEditing && !this.store.isNew } />
            <div className={ styles.hint }>{ app.manifestUrl || '...' }</div>
          </div>
          <div>
            <label>Content hash, as generated by Githubhint</label>
            <input value={ app.contentHash || '' } readOnly={ !this.store.isEditing && !this.store.isNew } />
            <div className={ styles.hint }>{ app.contentUrl || '...' }</div>
          </div>
        </div>
      </div>
    );
  }

  renderFooter () {
    return (
      <div className={ styles.footer }>
        { this.store.count } applications registered, { this.store.ownedCount } owned by user
      </div>
    );
  }

  renderLoading () {
    return (
      <div className={ styles.body }>
        <div className={ styles.loading }>Loading application</div>
      </div>
    );
  }

  renderWarning () {
    return (
      <div className={ styles.warning }>
        WARNING: Registering a dapp is for developers only. Please ensure you understand the steps needed to develop and deploy applications, should you wish to use this dapp for anything apart from queries. A non-refundable fee of { api.util.fromWei(this.store.fee).toFormat(3) }<small>ETH</small> is required for any registration.
      </div>
    );
  }

  onSelectAccount = (event) => {
    this.store.setCurrentAccount(event.target.value);
  }

  onSelectApp = (event) => {
    this.store.setCurrentApp(event.target.value);
  }

  onCancelClick = () => {

  }

  onEditClick = () => {
    if (!this.store.currentApp.isOwner) {
      return;
    }
  }

  onNewClick = () => {
  }

  onSaveClick = () => {
  }
}
