// Copyright 2015, 2016 Ethcore (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

import React, { Component } from 'react';
import { observer } from 'mobx-react';

import { api } from '../parity';

import Input from '../Input';
import SelectAccount from '../SelectAccount';
import Store from '../store';
import styles from './dapp.css';

@observer
export default class Dapp extends Component {
  store = Store.instance();

  render () {
    const app = this.store.isNew || this.store.isEditing
      ? this.store.wipApp
      : this.store.currentApp;

    return (
      <div className={ styles.app }>
        <Input
          hint='...'
          label='Application Id, the unique assigned identifier'>
          <input value={ app.id } readOnly />
        </Input>
        { this.store.isNew ? this.renderOwnerSelect(app) : this.renderOwnerStatic(app) }
        { this.renderHashInput(app, 'image', 'Image hash, as generated by Githubhint', true) }
        { this.renderHashInput(app, 'manifest', 'Manifest hash, as generated by Githubhint') }
        { this.renderHashInput(app, 'content', 'Content hash, as generated by Githubhint') }
      </div>
    );
  }

  renderOwnerSelect (app) {
    const overlayImage = (
      <img
        className={ styles.overlayImage }
        src={ api.util.createIdentityImg(this.store.currentAccount.address, 4) } />
    );

    return (
      <Input
        hint={ this.store.currentAccount.address }
        label='Owner, select the application owner and editor'
        overlay={ overlayImage }>
        <SelectAccount />
      </Input>
    );
  }

  renderOwnerStatic (app) {
    const overlayImage = (
      <img
        className={ styles.overlayImage }
        src={ api.util.createIdentityImg(app.owner, 4) } />
    );

    return (
      <Input
        hint={ app.owner }
        label='Owner, the application owner and editor'
        overlay={ overlayImage }>
        <input value={ app.ownerName } readOnly />
      </Input>
    );
  }

  renderHashInput (app, type, label, withImage = false) {
    const onChange = (event) => this.onChangeHash(event, type);
    const hash = app[`${type}Hash`];

    let overlayImage = null;
    if (withImage && hash) {
      overlayImage = (
        <img
          className={ styles.overlayImage }
          src={ `/api/content/${hash.substr(2)}` } />
      );
    }

    return (
      <Input
        hint={ app[`${type}Error`] || app[`${type}Url`] || '...' }
        label={ label }
        overlay={ overlayImage }>
        <input
          value={ app[`${type}Hash`] || '' }
          data-dirty={ app[`${type}Changed`] }
          data-error={ !!app[`${type}Error`] }
          readOnly={ !this.store.isEditing && !this.store.isNew }
          onChange={ onChange } />
      </Input>
    );
  }

  onChangeHash (event, type) {
    if (!this.store.isNew && !this.store.isEditing) {
      return;
    }

    const hash = event.target.value;
    let changed = false;
    let url = null;

    if (this.store.isNew) {
      if (hash && hash.length) {
        changed = true;
      }
    } else {
      if (this.store.currentApp[`${type}Hash`] !== hash) {
        changed = true;
      } else {
        url = this.store.currentApp[`${type}Url`];
      }
    }

    this.store.editWip({
      [`${type}Changed`]: changed,
      [`${type}Error`]: null,
      [`${type}Hash`]: hash,
      [`${type}Url`]: changed ? 'Resolving url from hash' : url
    });

    if (changed) {
      this.store
        .lookupHash(hash)
        .then((url) => {
          this.store.editWip({
            [`${type}Error`]: url ? null : 'Unable to resolve url',
            [`${type}Url`]: url
          });
        });
    }
  }
}
